from collections import defaultdict
from math import sqrt,factorial,gcd,log2
# map(int,input().split())
# l = list(map(int,input().split()))
import sys
sys.setrecursionlimit(10**9)

def find_parent(u):
    if par[u]!=u:
        par[u]=find_parent(par[u])
    return par[u]

n,q = map(int,input().split())
l = list(input())


par = [i for i in range(n)]


rank = []
for i in l:
    if i == '0':
        rank.append(0)
    else:
        rank.append(1)

maxi = 0
for i in range(len(l)-1):
    if l[i] == '1' and l[i+1] == '1':
        z1,z2 = find_parent(i),find_parent(i+1)
        if z1!=z2:
            if rank[z1]>rank[z2]:
                z1,z2 = z2,z1

            rank[z2]+=rank[z1]
            par[z1] = z2
            maxi = max(rank[z2],maxi)

for i in range(q):
    la = list(map(int,input().split()))
    if la[0] == 1:
        print(maxi)
    else:
        a,b = la
        b-=1

        temp = l[b]
        if temp!='1':
         l[b] = '1'
         rank[b]+=1
         maxi = max(rank[b],maxi)
         if l[b-1] == '1' and b-1>=0:
            z1,z2 = find_parent(b),find_parent(b-1)
            if z1!=z2:
             if rank[z1]>rank[z2]:
                z1,z2 = z2,z1

             rank[z2]+=rank[z1]
             par[z1] = z2

             maxi = max(rank[z2],maxi)
         if b+1<n:
            if l[b+1] == '1':
                z1,z2 = find_parent(b),find_parent(b+1)
                if z1!=z2:
                 if rank[z1]>rank[z2]:
                    z1,z2 = z2,z1

                 rank[z2]+=rank[z1]
                 par[z1] = z2
                 maxi = max(rank[z2],maxi)


