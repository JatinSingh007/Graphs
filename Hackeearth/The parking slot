from collections import defaultdict
import heapq


from collections import defaultdict

def dijsk(n):


    distances[n] = 0
    hea = [[0,n]]

    while len(hea)>0:

        a,b = heapq.heappop(hea)

        if bool[b]:
            continue

        bool[b] = True

        for c,w in hash[b]:

            distances[c] = min(distances[c],distances[b]+w)
            heapq.heappush(hea,[distances[c],c])







from collections import defaultdict

n,m,f = map(int, input().split())

l = list(map(int,input().split()))

hash = defaultdict(list)

for i in range(m):

    a,b,w = map(int,input().split())
    hash[a].append([b,w])
    hash[b].append([a,w])

k = int(input())
bool = [False]*(n+1)
distances = [10**18]*(n+1)

dijsk(1)
ka = [ [i,j] for j,i in enumerate(distances)]
ka.sort()
ans = [-1]*(k+1)
yo = 1
for a,b in ka:
    z = l[b-1]
    while z!=0:
         if a != 10**18:
          ans[yo] = f+a
         
             
         z-=1
         yo+=1
         if yo == k+1:
             print(*ans[1:])
             exit()





for i in ans[1:]:
    if i>=10**18:
        print(-1,end = ' ')
    else:
        print(i,end= ' ')
 
 
 
