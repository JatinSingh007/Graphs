from bisect import bisect
from collections import defaultdict
# l = list(map(int,input().split()))
# map(int,input().split()))
from math import gcd,sqrt,ceil,inf
from collections import Counter
import sys
sys.setrecursionlimit(1000000)
from bisect import bisect
from collections import defaultdict
# l = list(map(int,input().split()))
# map(int,input().split()))
from math import gcd,sqrt,ceil,inf,factorial,log2
from collections import Counter
import sys
sys.setrecursionlimit(10**9)

n = 10**6+1
seive = [1]*(n+1)
# seive[1] = 1
def solve():

    for i in range(1,len(seive)):
        k = 2
        j = i*k



        while j<len(seive):
            # if i == 5:
            #     print(j)
            seive[j]+=1
            k+=1
            j = i*k
solve()
def dfs(n,par):
    vis[n] = 1
    dp[1][n] = seive[n]


    for i in hash[n]:
        if i!=par and vis[i] == 0:
            dfs(i,n)

            dp[0][n] += max(dp[0][i],dp[1][i])
            dp[1][n] += dp[0][i]




n  = int(input())


dp = []
for i in range(2):
    k = [0]*(n+1)
    dp.append(k)

vis = [0]*(n+1)
hash = defaultdict(list)
for i in range(n-1):
    a,b = map(int,input().split())
    hash[a].append(b)
    hash[b].append(a)

dfs(1,0)
print(max(dp[0][1],dp[1][1]))
