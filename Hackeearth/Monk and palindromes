from bisect import bisect
from collections import defaultdict
# l = list(map(int,input().split()))
# map(int,input().split()))
from math import gcd,sqrt,ceil,inf
from collections import Counter
import sys
sys.setrecursionlimit(10**9)

def find_parent(u):
    if par[u]!=u:
        par[u]=find_parent(par[u])
    return par[u]


n = int(input())
par = [0]+[i+1 for i in range(n)]
rank = [1]*(n+1)
mod = 10**9 + 7
q = int(input())
for i in range(q):
    a,b = map(int,input().split())
    z = b-a + 1

    while a<b:
       z1,z2 = find_parent(a),find_parent(b)

       if par[z1]!=par[z2]:
        if rank[z1]>rank[z2]:
           z1,z2 = z2,z1
        par[z1] = z2
        rank[z2]+=rank[z1]
       a+=1
       b-=1

ans = 1
seti = set()
for i in range(1,n+1):
    z = find_parent(i)
    seti.add(z)
ans = pow(10,len(seti),mod)

# print(par)

print(ans)


