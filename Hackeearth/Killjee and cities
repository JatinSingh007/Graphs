
from collections import defaultdict


import sys

sys.setrecursionlimit(1000000)




#
# def dfs(node):
#
#
#
#     bool[node] = True
# 
#     for i in hash[node]:
#         if bool[i] == False:
#             dfs(i)

def find_parent(u):


    if par[u]!=u:
        par[u]=find_parent(par[u])


    return par[u]





# hash = defaultdict(set)

n = int(input())
m = int(input())
z = int(input())


par = [0]+[i+1 for i in range(n)]


tot = n
for i in range(m):

    a,b = map(int,input().split())
    #
    # hash[a].add(b)
    # hash[b].add(a)
    z1,z2 = find_parent(a),find_parent(b)
    if z1!=z2:
        tot-=1
        par[z1] = z2

q = int(input())
z = int(input())
# bool = defaultdict(bool)
# tot = 0
# for i in range(n):
#
#     if bool[i+1] == False:
#         tot+=1
#         dfs(i+1)



for i in range(q):

    a,b = map(int,input().split())
    z1,z2 = find_parent(a),find_parent(b)

    if z1!=z2:
        tot-=1
        par[z1] = z2
    print(tot-1,end = ' ')


