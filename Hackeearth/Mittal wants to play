# def solve1():
import heapq
def dijsk(n):


    distances[n] = 0
    hea = [[0,n]]

    while len(hea)>0:

        a,b = heapq.heappop(hea)

        if bool[b]:
            continue

        bool[b] = True

        for c,w in hash[b]:

            distances[c] = min(distances[c],distances[b]+w)
            heapq.heappush(hea,[distances[c],c])




from collections import defaultdict


t = int(input())

for _ in range(t):

    n,m = map(int,input().split())

    hash = defaultdict(list)

    for i in range(m):
        a,b,w =  map(int,input().split())
        hash[a].append([b,w])
        hash[b].append([a,w])

    bool = [False]*(n+1)
    distances = [10**18]*(n+1)
    dijsk(1)
    q = int(input())

    for i in range(q):
        a,b = map(int,input().split())
        if 2*distances[a]<b:
            print(b-2*distances[a])
        else:
            print(0)

