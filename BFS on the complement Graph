# from sys import stdin
# def rl():
#     return [int(w) for w in stdin.readline().split()]
from bisect import bisect_right
from bisect import bisect_left
from collections import defaultdict
from math import sqrt,factorial,gcd,log2,inf,ceil
# map(int,input().split())
# l = list(map(int,input().split()))

import sys

sys.setrecursionlimit(10**9)


n,m = map(int,input().split())
hash = defaultdict(set)

for i in range(m):
    a,b = map(int,input().split())
    hash[a].add(b)
    hash[b].add(a)
count = 0
un = {i+1 for i in range(n)}
while un:
    queue = {un.pop()}
    while queue:
        z = queue.pop()
        nxt = [u for u in un if u not in hash[z]]
        un.difference_update(nxt)
        queue.update(nxt)
    count+=1


print(count-1)

