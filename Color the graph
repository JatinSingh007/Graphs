from bisect import bisect
from collections import defaultdict
# l = list(map(int,input().split()))
# map(int,input().split()))
from math import gcd,sqrt,ceil,inf
from collections import Counter
import sys
sys.setrecursionlimit(1000000)
from bisect import bisect
from collections import defaultdict
# l = list(map(int,input().split()))
# map(int,input().split()))
from math import gcd,sqrt,ceil,inf
from collections import Counter
import sys
sys.setrecursionlimit(10**9)


flag = 0

def dfs(n,val):
    global c
    global C
    boo[n] = 1
    col[n] = val
    c+=val
    C+=1
    for i in hash[n]:


        if boo[i] == 0:


            dfs(i,val^1)
            # return z



    # boo[n] = 2


t = int(input())

for _ in range(t):

 n,m = map(int,input().split())


 hash = defaultdict(list)
 e = []
 for i in range(m):
    a,b = map(int,input().split())
    hash[a].append(b)
    hash[b].append(a)
    e.append([a,b])
 boo = [0]*(n+1)
 ans = 0
 col = [0]*(n+1)



 for i in range(1,n+1):
     if boo[i] == 0:
         # print(i)
         c = 0
         C = 0
         dfs(i,c)
         ans+=max(c,C-c)
         # print(boo)

 for a,b in e:
     if col[a] == col[b]:
         flag = 1
         print('NO')
         break

 if not flag:

   print(ans)
