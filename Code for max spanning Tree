from sys import stdin
from collections import deque
mod = 10**9 + 7
# def rl():
#     return [int(w) for w in stdin.readline().split()]
from bisect import bisect_right
from bisect import bisect_left
from collections import defaultdict
from math import sqrt,factorial,gcd,log2,inf,ceil
# map(int,input().split())
# # l = list(map(int,input().split()))
# from itertools import permutations
 
# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
# e = int(input())
# f = int(input())
# ans = 0
#
# for i in range(d+1):
#     c = e*(min(i,a)) + f*(min(d-i,c,b))
#     ans = max(c,ans)
#     print(c,i,a)
#
# print(ans)
 
ans = 0
 
def find_parent(u):
    if par[u]!=u:
        par[u]=find_parent(par[u])
    return par[u]
 
x = inf
def bfs1(n,v):
    global x,ans
    par1[n] = [n,0]
    boo[n] = True
    queue = [n]
 
    while queue:
 
        z = queue.pop(0)
        flag = 0
        for i,w in hash[z]:
 
            if not boo[i]:
                boo[i] = True
                par1[i] = [z,w]
                queue.append(i)
                # if i == 4:
                #     print('asdsa')
 
                if i == v:
                    flag = 1
                    break
 
        if flag:
            break
 
    seti = {v}
    u = v
    ans+=cst[u-1]
    # print(par1)
    while par1[u]!=[u,0]:
        # print(u)
        u,w = par1[u]
 
        x = min(x,w)
        seti.add(u)
        ans+=cst[u-1]
 
    return seti
 
def bfs2(u):
    global ans
    boo = defaultdict(bool)
    boo[u] = True
    queue = [u]
 
    while queue:
 
        z = queue.pop()
 
        for i,w in hash[z]:
 
            if not boo[i] and i not in check and w>=x:
                boo[i] = True
                par[i] = z
                ans+=cst[i-1]
                queue.append(i)
 
 
 
 
 
 
n,m = map(int,input().split())
cst = list(map(int,input().split()))
edg = []
 
for i in range(m):
    a,b,w = map(int,input().split())
    edg.append([w,a,b])
u,v = map(int,input().split())
 
edg.sort(reverse=True)
par = [0]+[i+1 for i in range(n)]
rank = [1]*(n+1)
hash = defaultdict(list)
boo = [False]*(n+1)
for w,a,b in edg:
 
    z1,z2 = find_parent(a),find_parent(b)
    if z1!=z2:
        if rank[z1]>rank[z2]:
            z1,z2 = z2,z1
 
        par[z1] = z2
        rank[z2]+=rank[z1]
 
        hash[a].append([b,w])
        hash[b].append([a,w])
 
par1 = defaultdict(int)
par2 = defaultdict(int)
# print(hash)
check = bfs1(u,v)
 
for i in check:
    bfs2(i)
 
print(x,ans)
 
 
 
 
