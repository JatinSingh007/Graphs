from collections import defaultdict
from math import sqrt,factorial,gcd,log2,inf,ceil
# map(int,input().split())
# l = list(map(int,input().split()))
mod = 10**9 + 7

t = int(input())

a = []
def dfs(n):

    global ans
    boo[n] = True

    for i in hash[n]:
      if not boo[i]:
        dfs(i)

    if len(hash[n]) == 1:
        value[n][0] = la[n-1]
        value[n][1] = la[n-1]
        ans = max(value[n][0],ans)
    else:
      if len(hash[n]) == 3:
          hash[n].pop(0)
      z1 = hash[n][0]
      z2 = hash[n][1]
      value[n][0] = value[z1][1] + value[z2][1] + la[n-1]
      value[n][1] = max(value[z1][1]+la[n-1],value[z2][1]+la[n-1])
      ans = max(value[n][0],ans)



for _ in range(t):

 n = int(input())

 la = list(map(int,input().split()))
 if n == 1:
     print(la[-1])
     continue

 l = [i+1 for i in range(n)]
 hash = defaultdict(list)


 if n == 1:
     print(l[0])
     continue
 queue = []
 z = l.pop(0)
 queue.append(z)


 while queue and l:
    k = queue.pop(0)
    z1 = l.pop(0)
    z2 = l.pop(0)
    hash[k].append(z1)
    hash[k].append(z2)
    hash[z1].append(k)
    hash[z2].append(k)
    queue.append(z1)
    queue.append(z2)
 value = []

 for i in range(n+1):
     ka = [0]*(2)
     value.append(ka)

 boo = defaultdict(bool)
 ans = -10**18
 dfs(1)
 # print(value)
 # print(hash)
 print(ans)








