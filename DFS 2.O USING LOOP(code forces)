


import sys
sys.setrecursionlimit(1000000000)
la = []


def dfs(n):
    stack = [n]
    while stack:
        u = stack[-1]
        if instack[u] == 1:
            dp[u] = len(la) - when[u]
            stack.pop()
            continue
        la.append(u)
        when[u] = len(la) - 1
        instack[u] = 1
        for i in reversed(hash[u]):
            stack.append(i)











from collections import defaultdict

n,q = map(int,input().split())

l = [1]+list(map(int,input().split()))

hash = defaultdict(list)
dp = defaultdict(lambda : 1)

for i in range(1,n):

    z = l[i]
    hash[i+1].append(z)
    hash[z].append(i+1)
when = [0]*(n+1)
instack = [0]*(n+1)
dfs(1)

# print(la,dp)
yo = defaultdict(int)
for i in range(n):
    yo[la[i]] = i+1
ans = []
for i in range(q):
    a,b = map(int,input().split())
    z = yo[a]
    z1 = dp[a]
    if b>z1:
        ans.append(-1)
    else:
        ans.append(la[z-1+b-1])

print(*ans)

